class CustomCompleter : public QCompleter {
    Q_OBJECT
public:
    CustomCompleter(QObject *parent = nullptr) : QCompleter(parent) {
        setPopup(new QTreeView);
        popup()->setObjectName("animatedPopup"); // Для стилизации анимации
    }

    void showPopup() override {
        if (popup()->isVisible()) return;
        popup()->setGeometry(visualRect(currentRow())); // Устанавливаем начальные координаты
        popup()->setMaximumHeight(0); // Начальная высота = 0

        QPropertyAnimation *animation = new QPropertyAnimation(popup(), "maximumHeight");
        animation->setDuration(300); // Продолжительность анимации (в миллисекундах)
        animation->setEasingCurve(QEasingCurve::OutCubic);
        animation->setStartValue(0); // Начальное значение высоты
        animation->setEndValue(popup()->sizeHintForRow(0) * popup()->model()->rowCount()); // Конечное значение высоты

        connect(animation, &QPropertyAnimation::finished, popup(), [this]() {
            popup()->setMaximumHeight(QWIDGETSIZE_MAX); // После анимации, установим максимальную высоту
        });

        popup()->show();
        animation->start(QAbstractAnimation::DeleteWhenStopped);
    }

    void hidePopup() override {
        if (!popup()->isVisible()) return;

        QPropertyAnimation *animation = new QPropertyAnimation(popup(), "maximumHeight");
        animation->setDuration(300);
        animation->setEasingCurve(QEasingCurve::InCubic);
        animation->setStartValue(popup()->sizeHintForRow(0) * popup()->model()->rowCount());
        animation->setEndValue(0);

        connect(animation, &QPropertyAnimation::finished, popup(), [this]() {
            popup()->hide();
        });

        animation->start(QAbstractAnimation::DeleteWhenStopped);
    }
};
