long double RPNEvaluator::evaluateRPN(std::vector<std::string>& rpn)
{
    std::stack<long double> opStack;

    for (std::string token : rpn)
    {
        //Found operator
        if (RPN::isOperator(token[0]))
        {
            //Retrieve previous two operands
            if (opStack.size() < 2) {
                // Not enough operands in the stack
                // Handle the error appropriately
                // For now, return 0.0
                return 0.0;
            }
            long double operand2 = opStack.top();
            opStack.pop();

            long double operand1 = opStack.top();
            opStack.pop();

            //Perform relevant operation
            switch (token[0])
            {
                case '^': opStack.push(pow(operand1, operand2));  break;
                case '/': opStack.push(operand1 / operand2); break;
                case '*': opStack.push(operand1 * operand2); break;
                case '+': opStack.push(operand1 + operand2); break;
                case '-': opStack.push(operand1 - operand2); break;
            }
        }
        //Found function name
        else if (RPN::isFunction(token))
        {
            std::map<std::string, int> functionMap;
            // Function mappings...

            //Determine which function to perform; most take one operand, but some take 0 or 2 operands
            switch (functionMap[token])
            {
                // Cases...

                default:
                    // Handle unknown function
                    // For now, return 0.0
                    return 0.0;
            }
        }
        //If numerical value, push onto the stack
        else if (RPN::isNumericalToken(token[0]))
        {
            // Check if the token starts with "-" and has more than one character
            if (token[0] == '-' && token.size() > 1)
            {
                // Convert the substring without the "-" sign to a negative number
                opStack.push(-stold(token.substr(1)));
            }
            else
            {
                opStack.push(stold(token));
            }
        }
    }

    // Check if there is exactly one value left on the stack after evaluation
    if (opStack.size() != 1) {
        // Handle the error appropriately
        // For now, return 0.0
        return 0.0;
    }

    //Retrieve the top element of the stack, which should represent the final simplified value
    return opStack.top();
}
