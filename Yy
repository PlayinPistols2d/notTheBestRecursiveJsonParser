std::vector<std::string> RPN::parseString(const std::string& exp)
{
	std::string output = "";
	std::stack<std::string> opStack;
	opStack.push(" ");

	int i = 0;
	while (i < exp.length())
	{
		// ...

		//Found an operator
		else if (isOperator(exp.at(i)))
		{
			// Check if the operator is a negative sign and handle it accordingly
			if (exp.at(i) == '-' && (i == 0 || isOperator(exp.at(i - 1)) || exp.at(i - 1) == '('))
			{
				// Negate the following number
				output += "-1 ";
				opStack.push("*");
			}
			else
			{
				while (((isFunction(opStack.top())) ||
					    (deltaPriority(exp.at(i), opStack.top()) < 0)  ||
					    ((deltaPriority(exp.at(i), opStack.top()) == 0) && (exp.at(i) != '^'))) &&
					    (opStack.top() != "("))
				{
					output += opStack.top();
					output += " ";
					opStack.pop();
				}

				opStack.push(std::string(1, exp.at(i)));
			}
		}

		// ...
		i++;
	}

	// ...

	return outputTokens;
}
