// ...

std::vector<std::string> RPN::parseString(const std::string& exp)
{
    std::string output = "";
    std::stack<std::string> opStack;
    opStack.push(" ");

    int i = 0;
    while (i < exp.length())
    {
        // ...

        //Found an operator
        else if (isOperator(exp.at(i)))
        {
            if (exp.at(i) == '-' && (i == 0 || exp.at(i - 1) == '('))
            {
                // Check if '-' is a negative sign instead of a subtraction operator
                int offset = 1;
                std::string token = "-";
                while (i + offset < exp.size() && isNumericalToken(exp.at(i + offset)))
                {
                    token += exp.at(i + offset);
                    offset++;
                }
                output += token;
                output += " ";
                i += offset;
                continue;
            }

            while (((isFunction(opStack.top())) ||
                    (deltaPriority(exp.at(i), opStack.top()) < 0) ||
                    ((deltaPriority(exp.at(i), opStack.top()) == 0) && (exp.at(i) != '^'))) &&
                   (opStack.top() != "("))
            {
                output += opStack.top();
                output += " ";
                opStack.pop();
            }

            opStack.push(std::string(1, exp.at(i)));
        }

        // ...
    }

    // ...

    return outputTokens;
}

// ...
