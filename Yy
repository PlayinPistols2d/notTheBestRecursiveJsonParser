#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtGui/QComboBox>
#include <algorithm>

// Определение вашего типа данных mytype
class mytype {
public:
    int getNumber() const {
        return number_;
    }

private:
    int number_;
};

// Функция для сравнения значений int в mytype
bool compareMyType(const mytype& a, const mytype& b) {
    return a.getNumber() < b.getNumber();
}

int main() {
    QList<mytype> myList;

    // Заполните QList данными

    // Сортируем QList по возрастанию значений int
    std::sort(myList.begin(), myList.end(), compareMyType);

    // Заполняем комбобокс значениями int, отсортированными по возрастанию
    QComboBox comboBox;
    for (const auto& item : myList) {
        comboBox.addItem(QString::number(item.getNumber()));
    }

    // Создаем QMap<int, mytype> с аналогичной сортировкой
    QMap<int, mytype> myMap;
    for (const auto& item : myList) {
        myMap.insert(item.getNumber(), item);
    }

    // Теперь comboBox содержит отсортированные значения int,
    // а myMap содержит QMap с аналогичной сортировкой

    return 0;
}
